module Alu(
    input [4:0] AluSignal,
    input [31:0] A,
    input [31:0] B,
    output reg [31:0] AluResult,
    output reg [1:0] Flags
);

// Define signed version of A for arithmetic shift right
wire signed [31:0] A_signed = A;

//----------------------------------------
always @(*) begin
    // Initialize outputs
    AluResult = 32'd0;
    Flags = 2'b00;

    case (AluSignal)
        5'b00000: AluResult = A + B;          // Add
        5'b00001: AluResult = A - B;          // Subtract
        5'b00010: AluResult = A * B;          // Multiply
        5'b00011: AluResult = (B != 0) ? (A / B) : 32'd0;  // Divide (handles division by zero)
        5'b00100: AluResult = (B != 0) ? (A % B) : 32'd0;  // Modulus (handles division by zero)
        5'b00101: begin                       // Compare
            if (A == B) begin
                Flags = 2'b10;                // Equal
            end else if (A > B) begin
                Flags = 2'b01;                // Greater
            end else begin
                Flags = 2'b00;                // Less
            end
        end
        5'b00110: AluResult = A & B;          // AND
        5'b00111: AluResult = A | B;          // OR
        5'b01000: AluResult = ~A;             // NOT
        5'b01001: AluResult = B;              // Move
        5'b01010: AluResult = A << B;         // Logical Shift Left
        5'b01011: AluResult = A >> B;         // Logical Shift Right (unsigned)
        5'b01100: AluResult = A_signed >>> B; // Arithmetic Shift Right (signed)
        5'b01101: begin
            // Add specific functionality for this case
            // Example: AluResult = A ^ B;     // XOR (for demonstration)
        end
        default: begin
            AluResult = 32'd0;                // Default Result
            Flags = 2'b00;                    // Default Flags
        end
    endcase
end

endmodule
